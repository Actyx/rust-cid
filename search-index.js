var N=null,E="",T="t",U="u",searchIndex={};
var R=["version","codec","result","prefix","to_string","string","to_owned","clone_into","try_from","try_into","borrow_mut","type_id","borrow","typeid","formatter"];

searchIndex["cid"]={"doc":E,"i":[[3,"Cid","cid","Representation of a CID.",N,N],[12,R[0],E,E,0,N],[12,R[1],E,E,0,N],[12,"hash",E,E,0,N],[3,"Prefix",E,"Prefix represents all metadata of a CID, without the…",N,N],[12,R[0],E,E,1,N],[12,R[1],E,E,1,N],[12,"mh_type",E,E,1,N],[12,"mh_len",E,E,1,N],[4,"Version",E,E,N,N],[13,"V0",E,E,2,N],[13,"V1",E,E,2,N],[4,"Codec",E,E,N,N],[13,"Raw",E,E,3,N],[13,"DagProtobuf",E,E,3,N],[13,"DagCBOR",E,E,3,N],[13,"GitRaw",E,E,3,N],[13,"EthereumBlock",E,E,3,N],[13,"EthereumBlockList",E,E,3,N],[13,"EthereumTxTrie",E,E,3,N],[13,"EthereumTx",E,E,3,N],[13,"EthereumTxReceiptTrie",E,E,3,N],[13,"EthereumTxReceipt",E,E,3,N],[13,"EthereumStateTrie",E,E,3,N],[13,"EthereumAccountSnapshot",E,E,3,N],[13,"EthereumStorageTrie",E,E,3,N],[13,"BitcoinBlock",E,E,3,N],[13,"BitcoinTx",E,E,3,N],[13,"ZcashBlock",E,E,3,N],[13,"ZcashTx",E,E,3,N],[13,"DagJSON",E,E,3,N],[4,"Error",E,"Error types",N,N],[13,"UnknownCodec",E,E,4,N],[13,"InputTooShort",E,E,4,N],[13,"ParsingError",E,E,4,N],[13,"InvalidCidVersion",E,E,4,N],[11,"from",E,"Convert a number to the matching codec",3,[[["u64"]],[[R[2],[R[1]]],[R[1]]]]],[11,"from",E,E,2,[[["u64"]],[[R[2],[R[0]]],[R[0]]]]],[11,"is_v0_str",E,E,2,[[["str"]],["bool"]]],[11,"is_v0_binary",E,E,2,[[],["bool"]]],[6,"Result",E,E,N,N],[8,"ToCid",E,E,N,N],[10,"to_cid",E,E,5,[[["self"]],[["cid"],[R[2],["cid"]]]]],[11,"new",E,"Create a new CID.",0,[[[R[0]],[R[1]]],["cid"]]],[11,"from",E,"Create a new CID from raw data (binary or multibase…",0,[[["tocid"]],[["cid"],[R[2],["cid"]]]]],[11,"new_from_prefix",E,"Create a new CID from a prefix and some data.",0,[[[R[3]]],["cid"]]],[11,R[4],E,E,0,[[["self"]],[R[5]]]],[11,"to_bytes",E,E,0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,R[3],E,E,0,[[["self"]],[R[3]]]],[11,"new_from_bytes",E,E,1,[[],[[R[3]],[R[2],[R[3]]]]]],[11,"as_bytes",E,E,1,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,R[4],E,E,0,[[["self"]],[R[5]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[[T],["self"]]]],[11,R[8],E,E,0,[[[U]],[R[2]]]],[11,R[9],E,E,0,[[],[R[2]]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[13]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[[T],["self"]]]],[11,R[8],E,E,1,[[[U]],[R[2]]]],[11,R[9],E,E,1,[[],[R[2]]]],[11,R[12],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[13]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[[T],["self"]]]],[11,R[8],E,E,2,[[[U]],[R[2]]]],[11,R[9],E,E,2,[[],[R[2]]]],[11,R[12],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[13]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[[T],["self"]]]],[11,R[8],E,E,3,[[[U]],[R[2]]]],[11,R[9],E,E,3,[[],[R[2]]]],[11,R[12],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[13]]]],[11,R[4],E,E,4,[[["self"]],[R[5]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[[T],["self"]]]],[11,R[8],E,E,4,[[[U]],[R[2]]]],[11,R[9],E,E,4,[[],[R[2]]]],[11,R[12],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[13]]]],[11,"from",E,E,4,[[["error"]],["error"]]],[11,"from",E,E,4,[[["error"]],["error"]]],[11,"from",E,E,4,[[["error"]],["error"]]],[11,"eq",E,E,4,[[["error"],["self"]],["bool"]]],[11,"eq",E,E,3,[[[R[1]],["self"]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[0]]],["bool"]]],[11,"eq",E,E,0,[[["self"],["cid"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["cid"]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[3]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[3]]],["bool"]]],[11,"clone",E,E,4,[[["self"]],["error"]]],[11,"clone",E,E,3,[[["self"]],[R[1]]]],[11,"clone",E,E,2,[[["self"]],[R[0]]]],[11,"clone",E,E,0,[[["self"]],["cid"]]],[11,"clone",E,E,1,[[["self"]],[R[3]]]],[11,"fmt",E,E,4,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[14]]],[R[2]]]],[11,"from_str",E,E,0,[[["str"]],[R[2]]]],[11,"hash",E,E,0,[[["self"],["h"]]]],[11,"description",E,E,4,[[["self"]],["str"]]]],"p":[[3,"Cid"],[3,"Prefix"],[4,"Version"],[4,"Codec"],[4,"Error"],[8,"ToCid"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);